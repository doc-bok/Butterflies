package com.bokmcdok.butterflies.common.loot;

import com.bokmcdok.butterflies.registries.ItemRegistry;

import java.util.List;
import java.util.Random;

import com.google.gson.JsonObject;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
import org.jetbrains.annotations.NotNull;

/**
 * A loot modifier to add treasure to some chests.
 */
public class OakLeavesLootModifier extends BaseLootModifier {

    /**
     * Construction
     * @param conditionsIn The conditions needed for this loot modifier to apply.
     */
    public OakLeavesLootModifier(ItemRegistry itemRegistry,
                                 LootItemCondition[] conditionsIn)
    {
        super(itemRegistry, conditionsIn);
    }

    /**
     * Apply the modification to the loot.
     * @param generatedLoot the list of ItemStacks that will be dropped, generated by loot tables
     * @param context the LootContext, identical to what is passed to loot tables
     * @return The potentially updated loot.
     */
    @NotNull
    @Override
    public List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {
        Random random = context.getRandom();

        if (random.nextInt(4000) == 1) {
            ItemStack stack = new ItemStack(itemRegistry.getInfestedApple().get());
            generatedLoot.add(stack);
        }

        return generatedLoot;
    }

    /**
     * The Loot Modifier Serializer.
     */
    public static class Serializer extends GlobalLootModifierSerializer<OakLeavesLootModifier> {

        // The item registry.
        protected final ItemRegistry itemRegistry;

        /**
         * Construction
         */
        public Serializer(ItemRegistry itemRegistry)
        {
            this.itemRegistry = itemRegistry;
        }

        /**
         * Read Loot Modifier data.
         * @param name The resource name.
         * @param object The Json Object with any extra data.
         * @param conditionsIn The conditions for the loot.
         * @return A new loot modifier.
         */
        @Override
        public OakLeavesLootModifier read(ResourceLocation name,
                                          JsonObject object,
                                          LootItemCondition[] conditionsIn) {
            return new OakLeavesLootModifier(itemRegistry, conditionsIn);
        }

        /**
         * Write loot modifier data.
         * @param instance The loot modifier.
         * @return Modifier data in JSON format.
         */
        @Override
        public JsonObject write(OakLeavesLootModifier instance) {
            return makeConditions(instance.conditions);
        }
    }
}
